(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{588:function(t,a,e){"use strict";e.r(a);var i=e(10),s=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-命令"}},[t._v("#")]),t._v(" Git 命令")]),t._v(" "),e("h3",{attrs:{id:"git-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),e("ol",[e("li",[t._v("git rebase oem-develop\n"),e("ul",[e("li",[t._v("切换到自己的 feature 分支后，执行此命令实现变基")])])]),t._v(" "),e("li",[t._v("git push --force-with-lease origin feature/xx\n"),e("ul",[e("li",[t._v("强制把本地 rebase 之后的分支推送到远端")])])])]),t._v(" "),e("h3",{attrs:{id:"git-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),e("p",[t._v("强制回退，可能会把别人的代码也干掉")]),t._v(" "),e("ol",[e("li",[t._v("git reset --hard HEAD^SHA256\n"),e("ul",[e("li",[t._v("硬回退，不保留 stash")])])]),t._v(" "),e("li",[t._v("git reset --soft HEAD^/SHA256\n"),e("ul",[e("li",[t._v("软回退，保留 stash")])])])]),t._v(" "),e("p",[t._v("reset 之后再提交代码时需要强制提交-f")]),t._v(" "),e("h3",{attrs:{id:"git-commit-amend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-amend"}},[t._v("#")]),t._v(" git commit --amend")]),t._v(" "),e("p",[t._v("直接修改当前的提交信息，如果代码有更改，则需要先执行 git add")]),t._v(" "),e("h3",{attrs:{id:"git-revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),e("p",[t._v("原理是在当前提交后面，新增一条提交，抵消掉上一次提交导致的所有变化。它不会改变过去的提交历史，也不会影响后续的提交，所以是安全的，首选的，没有任何丢失代码风险的。")]),t._v(" "),e("ol",[e("li",[t._v("git revert commitId1 [commitid2 commitId3 ...]")])]),t._v(" "),e("h3",{attrs:{id:"git-tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),e("p",[t._v("Git 中的标签分为两种，一种是轻量标签（lightweight tag），一种是附注标签（annotated tag）。")]),t._v(" "),e("p",[t._v("tag 对应某次 commit， 是一个点，是不可移动的。branch 对应一系列 commit，是很多点连成的一根线，有一个 HEAD 指针，是可以依靠 HEAD 指针移动的。所以，两者的区别决定了使用方式，改动代码用 branch，不改动只查看用 tag。常用于上线之前对当前的 commit 记录打一个 tag，方便上线的代码有问题时可以及时回滚。")]),t._v(" "),e("p",[t._v("需要特别说明的是，如果我们想要修改 tag 检出代码分支，那么虽然分支中的代码改变了，但是 tag 标记的 commit 还是同一个，标记的代码是不会变的。")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git tag <lightweght_name>")]),t._v("：为当前分支所在的提交记录打上轻量标签。")]),t._v(" "),e("li",[e("code",[t._v("git tag <lightweght_name> <commit SHA-1 value>")]),t._v("：为某次具体的提交记录打上轻量标签。")]),t._v(" "),e("li",[e("code",[t._v("git tag -a <anotated_name> -m <tag_message>")]),t._v("：为当前分支所在的提交记录打上附注标签。")]),t._v(" "),e("li",[e("code",[t._v("git tag")]),t._v("或"),e("code",[t._v("git tag -l")]),t._v("：列出所有的标签名。")]),t._v(" "),e("li",[e("code",[t._v("git ls-remote --tags origin")]),t._v("：查看远程所有 tag。")]),t._v(" "),e("li",[e("code",[t._v("git tag -d <tag_name>")]),t._v("：删除某个标签，本质上就是移除 "),e("code",[t._v(".git/refs/tags/")]),t._v(" 中对应的文件。")]),t._v(" "),e("li",[e("code",[t._v("git show <tag_name>")]),t._v("：显示标签对应提交记录的具体信息。")]),t._v(" "),e("li",[e("code",[t._v("git push <remote> <tag_name>")]),t._v("：推送某个标签到远程仓库。")]),t._v(" "),e("li",[e("code",[t._v("git push <remote> --tags")]),t._v("：推送所有标签到远程仓库。")]),t._v(" "),e("li",[e("code",[t._v("git tag -d <tagName>")]),t._v("：本地 tag 的删除。")]),t._v(" "),e("li",[e("code",[t._v("git push <remote> --delete <tag_name>")]),t._v("：删除远程仓库中的某个标签。")]),t._v(" "),e("li",[e("code",[t._v("git push <remote> :refs/tags/<tagname>")]),t._v("：删除远程仓库某个标签的等价方式，相当于将冒号前面的空值推送到远程标签名，从而高效地删除它。")]),t._v(" "),e("li",[e("code",[t._v("git checkout -b <branchName> <tagName>")]),t._v("：检出标签，因为 tag 本身指向的就是一个 commit，所以和根据 commit id 检出分支是一个道理。")]),t._v(" "),e("li",[t._v("``：。")])]),t._v(" "),e("p",[t._v("示例：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("新增 tag "),e("code",[t._v('git tag -a v1.0.0 -m "my version v1.0.0"')])])]),t._v(" "),e("li",[e("p",[t._v("查看 tag "),e("code",[t._v("git show v1.0.0")])])]),t._v(" "),e("li",[e("p",[t._v("推送远端 "),e("code",[t._v("git push origin v1.0.0")])])])]),t._v(" "),e("p",[t._v("PS: tag 和在哪个分支创建是没有关系的，tag 只是提交的别名。因此 commit 的能力 tag 均可以使用，比如"),e("code",[t._v("git reset")]),t._v("，"),e("code",[t._v("git revert [pre-tag]")])]),t._v(" "),e("h3",{attrs:{id:"git-stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),e("ol",[e("li",[t._v('git stash save "commit msg"')]),t._v(" "),e("li",[t._v("git stash apply SHA256/stash@{number}")]),t._v(" "),e("li",[t._v("git stash pop\n"),e("ul",[e("li",[t._v("默认最近一次 stash")])])]),t._v(" "),e("li",[t._v("git stash list")]),t._v(" "),e("li",[t._v("git stash drop SHA256/stash@{number}")]),t._v(" "),e("li",[t._v("误操作 git stash drop 之后想恢复\n"),e("ul",[e("li",[t._v("git fsck --lost-found 可以得到 SHA256 列表")]),t._v(" "),e("li",[t._v("git show SHA256 可以查看详细信息")]),t._v(" "),e("li",[t._v("git stash apply SHA256 应用")])])])]),t._v(" "),e("h3",{attrs:{id:"git-bisect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-bisect"}},[t._v("#")]),t._v(" git bisect")]),t._v(" "),e("p",[t._v("使用 git bisect 二分法定位问题的基本步骤：")]),t._v(" "),e("ol",[e("li",[t._v("git bisect start [最近的出错的 commitid] [较远的正确的 commitid]")]),t._v(" "),e("li",[t._v("测试相应的功能")]),t._v(" "),e("li",[t._v("git bisect good 标记正确")]),t._v(" "),e("li",[t._v("直到出现问题则 标记错误 git bisect bad")]),t._v(" "),e("li",[t._v("提示的 commitid 就是导致问题的那次提交")]),t._v(" "),e("li",[t._v("具体示例参考"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/d0LvAd8cDQD_3KSX1fOpkQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"git-cherry-pick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),e("ol",[e("li",[t._v("选一次提交："),e("code",[t._v("git cherry-pick <commitHash>")])]),t._v(" "),e("li",[t._v("选多次提交："),e("code",[t._v("git cherry-pick <HashA> <HashB>")])]),t._v(" "),e("li",[t._v("选多次提交："),e("code",[t._v("git cherry-pick A..B")]),t._v("，提交 A 必须早于提交 B，提交 A 将不会包含在 Cherry pick 中")]),t._v(" "),e("li",[t._v("选多次提交："),e("code",[t._v("git cherry-pick A^..B")]),t._v("，包含提交 A")]),t._v(" "),e("li",[t._v("解决冲突后：1. "),e("code",[t._v("git add .")])]),t._v(" "),e("li",[t._v("解决冲突后：2. "),e("code",[t._v("git cherry-pick --continue")])]),t._v(" "),e("li",[t._v("发生代码冲突后，放弃合并，回到操作前的样子："),e("code",[t._v("git cherry-pick --abort")])]),t._v(" "),e("li",[t._v("发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子："),e("code",[t._v("git cherry-pick --quit")])])]),t._v(" "),e("ul",[e("li",[t._v("Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。\n"),e("ol",[e("li",[t._v("添加了一个远程仓库 target："),e("code",[t._v("git remote add target git://gitUrl")])]),t._v(" "),e("li",[t._v("远程代码抓取到本地："),e("code",[t._v("git fetch target")])]),t._v(" "),e("li",[t._v("检查一下要从远程仓库转移的提交，获取它的哈希值："),e("code",[t._v("git log target/master")])]),t._v(" "),e("li",[t._v("使用 git cherry-pick 命令转移提交："),e("code",[t._v("git cherry-pick <commitHash>")])])])])]),t._v(" "),e("h2",{attrs:{id:"修改-git-commit-msg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改-git-commit-msg"}},[t._v("#")]),t._v(" 修改 Git commit msg")]),t._v(" "),e("ol",[e("li",[t._v("修改最近一次的 commit 信息 git commit --amend")]),t._v(" "),e("li",[t._v("git reset --soft HEAD^ 重新提交")]),t._v(" "),e("li",[t._v("git log --oneline -5 查看最近 5 次 commit 的简要信息")]),t._v(" "),e("li",[t._v("比如要修改的 commit 是倒数第三条，使用下述命令：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase -i HEAD~3\n退出保存 :wq\n执行 git rebase --continue\n执行 git push -f 推送到服务端。\n")])])]),e("h2",{attrs:{id:"vscode-插件-扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vscode-插件-扩展"}},[t._v("#")]),t._v(" VSCode 插件/扩展")]),t._v(" "),e("h3",{attrs:{id:"git-graph"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-graph"}},[t._v("#")]),t._v(" Git Graph")]),t._v(" "),e("p",[t._v("可视化查看代码仓库分支和提交记录，右键管理操作分支")]),t._v(" "),e("h3",{attrs:{id:"gitlens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlens"}},[t._v("#")]),t._v(" GitLens")]),t._v(" "),e("h3",{attrs:{id:"git-history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-history"}},[t._v("#")]),t._v(" Git History")]),t._v(" "),e("p",[t._v("提交记录")]),t._v(" "),e("h3",{attrs:{id:"git-blame"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-blame"}},[t._v("#")]),t._v(" Git Blame")]),t._v(" "),e("p",[t._v("提交记录")]),t._v(" "),e("h3",{attrs:{id:"gitignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" gitignore")]),t._v(" "),e("p",[t._v("为.gitignore 文件提供语法支持，远程下载.gitignore 模板")]),t._v(" "),e("h3",{attrs:{id:"git-project-manager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-project-manager"}},[t._v("#")]),t._v(" Git Project Manager")]),t._v(" "),e("h3",{attrs:{id:"git-history-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-history-diff"}},[t._v("#")]),t._v(" Git History Diff")]),t._v(" "),e("p",[t._v("提交记录对比")]),t._v(" "),e("h3",{attrs:{id:"如何把一份本地代码同时上传-gitlab-和-gitee"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何把一份本地代码同时上传-gitlab-和-gitee"}},[t._v("#")]),t._v(" 如何把一份本地代码同时上传 gitlab 和 gitee")]),t._v(" "),e("p",[t._v("git 本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库，所以一个本地库可以既关联 GitHub，又关联码云！")]),t._v(" "),e("p",[t._v("使用多个远程库时，要注意 git 给远程库起的默认名称是 origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以 learngit 本地库为例，先删除已关联的名为 origin 的远程库：")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git remote rm origin\n")])])]),e("p",[t._v("然后，先关联 GitHub 的远程库：")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git remote add github git@github.com:xxx/LearnGit.git\n")])])]),e("p",[t._v("注意，远程库的名称叫 github，不叫 origin 了。\n接着，再关联码云的远程库：")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git remote add gitee git@gitee.com:xxx/LearnGit.git\n")])])]),e("p",[t._v("同样注意，远程库的名称叫 gitee，不叫 origin。\n现在，我们用 git remote -v 查看远程库信息，可以看到两个远程库：")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("gitee git@gitee.com:xxx/LearnGit.git (fetch)\ngitee git@gitee.com:xxx/LearnGit.git (push)\ngithub git@github.com:xxx/LearnGit.git (fetch)\ngithub git@github.com:xxx/LearnGit.git (push)如果要推送到GitHub，使用命令：\ngit push github master\n")])])]),e("p",[t._v("如果要推送到码云，使用命令：")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git push gitee master\n")])])]),e("p",[t._v("这样一来，本地库就可以同时与多个远程库互相同步")]),t._v(" "),e("h3",{attrs:{id:"不切换-git-分支-却能同时在多个分支上工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不切换-git-分支-却能同时在多个分支上工作"}},[t._v("#")]),t._v(" 不切换 Git 分支，却能同时在多个分支上工作")]),t._v(" "),e("p",[t._v("正在开发某个 feature，老板突然跳出来说让你做生产上的 hotfix，面对这种情况，使用 Git 的我们通常有两种解决方案：")]),t._v(" "),e("ol",[e("li",[t._v("草草提交未完成的 feature，然后切换分支到 hotfix")]),t._v(" "),e("li",[t._v("git stash | git stash pop 暂存工作内容，然后再切换到 hotfix")]),t._v(" "),e("li",[t._v("git clone 多个 repo")])]),t._v(" "),e("p",[t._v("使用 git-worktree，仅需维护一个 repo，又可以同时在多个 branch 上工作，互不影响！！！")]),t._v(" "),e("p",[t._v("常用的其实只有下面这四个命令：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加一个worktree")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--detach"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--checkout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--lock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("new-branch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-ish"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前的worktree，在任意一个worktree下都可用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree list "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--porcelain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除某些不需要的worktree")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree remove "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("worktree"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清洁的兜底操作，可以让我们的工作始终保持整洁")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree prune "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--expire "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("expire"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("普及两个你可能忽视的 Git 知识点：")]),t._v(" "),e("ol",[e("li",[t._v("默认情况下， git init 或 git clone 初始化的 repo，只有一个 worktree，叫做 main worktree;")]),t._v(" "),e("li",[t._v("在某一个目录下使用 Git 命令，当前目录下要么有 .git 文件夹；要么有 .git 文件，如果只有 .git 文件，里面的内容必须是指向 .git 文件夹的;")])]),t._v(" "),e("p",[t._v("eg.")]),t._v(" "),e("p",[e("code",[t._v('git worktree add -b "hotfix/JIRA234-fix-naming" ../hotfix/JIRA234-fix-naming')]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("git worktree list")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("git worktree remove hotfix/hotfix/JIRA234-fix-naming")]),t._v(".")]),t._v(" "),e("p",[t._v("建议：通常使用 git worktree，我会统一目录结构，比如 feature 目录下存放所有 feature 的 worktree，hotfix 目录下存放所有 hotfix 的 worktree，这样整个磁盘目录结构不至于因为创建多个 worktree 而变得混乱。")]),t._v(" "),e("h3",{attrs:{id:"git-命令设置别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-命令设置别名"}},[t._v("#")]),t._v(" git 命令设置别名")]),t._v(" "),e("ol",[e("li",[t._v("git config --global alias.ps push - 把 push 设为 ps；")]),t._v(" "),e("li",[t._v("手动编辑全局配置文件：\n"),e("ul",[e("li",[e("code",[t._v("nano ~/.gitconfig")])]),t._v(" "),e("li",[t._v("写入对应的别名对，例："),e("code",[t._v("co = checkout pl = pull")]),t._v("等并保存退出，")]),t._v(" "),e("li",[t._v("执行"),e("code",[t._v("source ~/.gitconfig")]),t._v("使改动生效")])])])]),t._v(" "),e("h3",{attrs:{id:"git-hooks-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks-原理"}},[t._v("#")]),t._v(" git hooks 原理")]),t._v(" "),e("ol",[e("li",[t._v("git 允许在各种操作之前添加一些 hook 脚本，如未正常运行则 git 操作不通过。最出名的还是以下两个：\n"),e("ul",[e("li",[t._v("precommit")]),t._v(" "),e("li",[t._v("prepush")])])]),t._v(" "),e("li",[t._v("hook 脚本置于目录 ~/.git/hooks 中，以「可执行文件」的形式存在。查看命令："),e("code",[t._v("ls -lah .git/hooks")]),t._v("。")]),t._v(" "),e("li",[t._v("git hooks 可使用 core.hooksPath 自定义脚本位置。")]),t._v(" "),e("li",[t._v("husky 即通过自定义 core.hooksPath 并将 npm scripts 写入其中的方式来实现此功能。\n"),e("ul",[e("li",[t._v("在"),e("code",[t._v("~/.husky")]),t._v(" 目录下手动创建 hook 脚本。如："),e("code",[t._v("vim .husky/pre-commit")])]),t._v(" "),e("li",[t._v("在 hook 脚本中做一些操作，如：在 pre-commit 中进行代码风格校验："),e("code",[t._v("npm run lint && npm run test")])])])])]),t._v(" "),e("h3",{attrs:{id:"git-设置识别文件名大小写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-设置识别文件名大小写"}},[t._v("#")]),t._v(" git 设置识别文件名大小写")]),t._v(" "),e("p",[e("code",[t._v("git config core.ignoreCase true/false")])]),t._v(" "),e("h3",{attrs:{id:"git-reflog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),e("p",[t._v("结合"),e("code",[t._v(".git/logs/HEAD")]),t._v("，勿删 commit 或分支之后找回。")]),t._v(" "),e("h3",{attrs:{id:"强制禁用-fast-forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制禁用-fast-forward"}},[t._v("#")]),t._v(" 强制禁用 Fast-Forward")]),t._v(" "),e("p",[e("code",[t._v("git merge --no-ff")]),t._v("会生成一个新的 commit")]),t._v(" "),e("h3",{attrs:{id:"git-是如何存储信息的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-是如何存储信息的"}},[t._v("#")]),t._v(" git 是如何存储信息的")]),t._v(" "),e("p",[t._v("查看.git/objects 目录：")]),t._v(" "),e("ol",[e("li",[t._v("当使用 git add 命令把文件加入暂存区时，git 会根据这个对象的内容计算出 SHA-1 值")]),t._v(" "),e("li",[t._v("git 接着会用 SHA-1 值的前 2 个字符作为目录名称（避免让.git/objects 目录因为文件过多而降低读取效率），后 38 个字符作为文件名，创建目录及文件并放在.git/objects 目录下")]),t._v(" "),e("li",[t._v("文件的内容则是 git 使用压缩算法把原本的内容压缩之后的结果（二进制 blob 文件）")]),t._v(" "),e("li",[t._v("git commit 存储的是：打包前存储的是全新文件，打包后使用了类似差异备份的方式进行存储")]),t._v(" "),e("li",[t._v("当.git/objects 目录下对象过多时会自动触发资源回收，或者 git push 到远端服务器时，也可通过"),e("code",[t._v("git gc")]),t._v("手动触发")])])])}),[],!1,null,null,null);a.default=s.exports}}]);